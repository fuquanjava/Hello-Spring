
spring,不要重复的发明轮子

IOC:控制反转,从spring容器的角度来看待问题，表示容器控制应用程序，控制程序需要的外部资源.
DI:依赖注入,从应用程序的角度来说,程序依赖容器注入的所需要的外部资源.
容器的作用: 1.控制对象的生命周期(创建，实例化，销毁)
            2.提供对象的运行的环境.


Bean的管理:BeanFactory.
ApplicationContext 实现 BeanFactory.
IOC容器就可以当成是ApplicationContext


spring实例化bean:
构造方法(默认实现用空参)
静态工厂方法
实例工厂方法

DI:注入方式
1.构造
2.setter
3.方法注入




Spring : singleton 跟设计模式中的单例不一样, spring的单例表示在当前容器中是单例，
        并不是在JVM中是单例


OOP:软件从上到下的分析
AOP:从左到右的功能分析

AOP的几个概念:

 连接点（Jointpoint）(那个方法上面干)：

 在AOP中表示为“在哪里干” ,
 表示需要在程序中插入横切关注点的扩展点，
 连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常等等，Spring只支持方法执行连接点；


 切入点（Pointcut）(那些方法上面干)：

 选择一组相关连接点的模式，即可以认为连接点的集合，
 Spring支持perl5正则表达式和AspectJ切入点模式，
 Spring默认使用AspectJ语法，在AOP中表示为“在哪里干的集合”；

 通知（Advice） (怎么干)：

 在连接点上执行的行为，通知提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段
 在AOP中表示为“干什么”.指的是切面组件在连接点上执行的劢作。
 例如：在方法调用前、方法调用后、方法调用前后等。


 方面/切面（Aspect）（干什么）：

 横切关注点的模块化，比如上边提到的日志组件。
 可以认为是通知、引入和切入点的组合；
 在Spring中可以使用Schema和@AspectJ方式进行组织实现；在AOP中表示为“在哪干和干什么集合”



 目标对象（Target Object）(对谁干 ，通常是被spring通过代理来执行的)：
 需要被织入横切关注点的对象，即该对象是切入点选择的对象，
 需要被通知的对象，从而也可称为“被通知对象”；
 由于Spring AOP 通过代理模式实现，从而这个对象永远是被代理对象，在AOP中表示为“对谁干”


 事务:

 请注意Spring框架的事务基础架构代码将默认地 只 在抛出运行时和unchecked exceptions时才标识事务回滚。
 也就是说，当抛出一个 RuntimeException 或其子类例的实例时（Errors 也一样）事务回滚 .
 比如说 数组越界 , 类型转换异常等等.

 从事务方法中抛出的Checked exceptions将 不 被标识进行事务回滚.比如 SQLException , IOException
 当然可以配置Exception也回滚
 rollback-for="NoProductInStockException"

 还可以配置unckecked exception不回滚
 no-rollback-for="classCastException"



 spring rest
 rest: representational state transfer 表述性状态转移 ,可替换SOAP

 SOAP是RPC (Remote procedure Call )机制.
 REST 跟 RPC 没有关系.
 RPC 是面向服务 ， 专注于行为和动作.
 REST 面向资源，强调描述应用程序的事物和名词

 细说 表述性状态转移
 表述性: 表示资源用何种资源来表述, json , xml , html 最适合的任意形式
 状态:关注的是资源的状态，而不是对资源采取的行为
 转移:涉及转移资源数据，以某种表述形式从一个应用转移到另外一个应用

 总结:REST就是将资源的状态用最合适的形式从服务器转移到客户端(或者反之)

 URL: http://localhost:8080/spring/showInfo.html?id=2 (非Rest)
 show:动词 , id=2 表示符

 REST:http://localhost:8080/spring/detailhtml/2
 detailhtml:资源类型


#################  spring MVC  #############################


 1.web.xml配置 org.springframework.web.servlet.DispatcherServlet ，指定springmvc-servlet.xml文件的路径
    注意：在DispatcherServlet里面配置url-pattern: / , 不能配置成 /* , /* 会找不到JSP
 2.写controller (实现controller 接口 , controller是最顶层的接口) , Controller组件约定的handleRequest方法执行后返回一个ModelAndView对象，
    该对象可封装模型数据和视图名响应信息.
 3.配置springmvc.xml 文件


 分析:
    1.请求到达DispatcherServlet , 该servlet 如何处理请求到指定的Controller ?

 需要在springmvc-servlet.xml 文件中配置 HandlerMapping 组件，该组件提供 uri 到 controller的映射
 Spring提供了以下几个典型的HandlerMapping组件：
 BeanNameUrlHandlerMapping : 根据 bean 的name 属性值映射(spring在找不到handlerMapping的情况下会使用BeanNameUrlHandlerMapping)
 SimpleUrlHandlerMapping : 维护一个HTTP请求和Controller映射关系列表，根据列表对应关系调用Controller


    2. 在Controller里面return ModelAndView ,spring怎么解析?

 配置视图解析器ViewResolver。所有Controller组件都返回一个ModelAndView实例，封装了视图名。
 Spring中的视图以名字为标识，视图解析器ViewResolver通过名字来解析视图.